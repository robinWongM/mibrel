package api

import (
	"context"
	"encoding/json"
	"log"
	"os"

	"github.com/bufbuild/connect-go"
	"github.com/go-git/go-git/v5"
	"github.com/hibiken/asynq"

	zyrevav1 "github.com/zyreva/zyreva/internal/gen/proto/zyreva/v1" // generated by protoc-gen-go
	"github.com/zyreva/zyreva/internal/pkg/nixpacks"
)

type AppService struct {
	client *asynq.Client
}

func (s *AppService) Analyze(
	ctx context.Context,
	req *connect.Request[zyrevav1.AnalyzeRequest],
	stream *connect.ServerStream[zyrevav1.AnalyzeResponse],
) error {
	log.Println("Request headers: ", req.Msg.Url)

	// create a new empty random temp dir
	dir, err := os.MkdirTemp("", "zyreva-git-")
	defer os.RemoveAll(dir)
	if err != nil {
		return err
	}

	stream.Send(&zyrevav1.AnalyzeResponse{Log: "Git clone started.\n"})

	_, err = git.PlainClone(dir, false, &git.CloneOptions{
		URL: req.Msg.Url,
	})
	if err != nil {
		return err
	}

	stream.Send(&zyrevav1.AnalyzeResponse{Log: "Git clone finished.\n"})
	stream.Send(&zyrevav1.AnalyzeResponse{Log: "Analyzing Git repository to generate build plan.\n"})

	var plan nixpacks.BuildPlan

	planJson, err := nixpacks.Plan(dir)
	if err != nil {
		return err
	}

	err = json.Unmarshal(planJson, &plan)
	if err != nil {
		return err
	}

	stream.Send(&zyrevav1.AnalyzeResponse{
		Finished:    true,
		Log:         "Build plan generated.\n",
		Variables:   plan.Variables,
		NixPkgs:     plan.Phases["setup"].NixPkgs,
		InstallCmds: plan.Phases["install"].Cmds,
		BuildCmds:   plan.Phases["build"].Cmds,
		StartCmd:    plan.Start.Cmd,
	})

	return nil
}
